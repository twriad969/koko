import requests
import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, ChatAction
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext

BASE_URL = 'https://api.hornyhouse.xyz/tra/'
user_memberships = {}
daily_users = {}

def update_daily_users(user_id):
    today = datetime.date.today().isoformat()
    if today not in daily_users:
        daily_users[today] = set()
    daily_users[today].add(user_id)

def start(update: Update, context: CallbackContext):
    first_name = update.effective_user.first_name
    context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    greeting = f"ЁЯОЙ Welcome, {first_name}! ЁЯОЙ\n\nChoose an option to get started ЁЯШК"
    keyboard = [
        [InlineKeyboardButton("ЁЯЫТ Buy Membership", callback_data='buy_membership')],
        [InlineKeyboardButton("ЁЯМЯ Benefits of Membership", callback_data='benefits')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(greeting, reply_markup=reply_markup)
    update_daily_users(update.effective_user.id)

def stats(update: Update, context: CallbackContext):
    today = datetime.date.today().isoformat()
    user_count = len(daily_users.get(today, []))
    update.message.reply_text(f"ЁЯУК Today's User Count: {user_count}")

def main_menu(update: Update, context: CallbackContext, message_id=None):
    context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    keyboard = [
        [InlineKeyboardButton("ЁЯЫТ Buy Membership", callback_data='buy_membership')],
        [InlineKeyboardButton("ЁЯМЯ Benefits of Membership", callback_data='benefits')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "рж╕рзНржмрж╛ржЧрждржо! ржПржХржЯрж┐ ржЕрж╕рж╛ржзрж╛рж░ржг ржЕржлрж╛рж░рзЗ ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧржд ржЬрж╛ржирж╛ржЪрзНржЫрж┐! \n\n\ржЖржорж░рж╛ ржЖржкржирж╛ржХрзЗ рзирзж+ ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо ржжрзЗрж╢рж┐ ржХрж╛рж▓рзЗржХрж╢ржи, ржирж┐ржпрж╝ржорж┐ржд ржЖржкржбрзЗржЯ ржХржиржЯрзЗржирзНржЯ, ржПржмржВ рж▓рж╛ржЗржлржЯрж╛ржЗржо ржорзЗржорзНржмрж╛рж░рж╢рж┐ржкрзЗрж░ рж╕рзБржмрж┐ржзрж╛ржЧрзБрж▓рж┐ рж╕рж╣ ржЕржирзЗржХ ржЕржирзЗржХ ржЖрж░ржУ ржжрж┐рждрзЗ рж╕ржорзНржкрзВрж░рзНржг ржкрзНрж░рж╕рзНрждрж╛ржмржирж╛ ржжрзЗржЗ! ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо ржорзЗржорзНржмрж╛рж░рж╢рж┐ржк ржХрзЗржирж╛рж░ ржЬржирзНржп ' \n\n\ЁЯЫТ ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо ржорзЗржорзНржмрж╛рж░рж╢рж┐ржк ржХрж┐ржирзБржи' ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред "
    if message_id:
        context.bot.edit_message_text(text=text, chat_id=update.effective_chat.id, message_id=message_id, reply_markup=reply_markup)
    else:
        update.message.reply_text(text, reply_markup=reply_markup)
    update_daily_users(update.effective_user.id)

def payment_menu(update: Update, context: CallbackContext, query):
    context.bot.send_chat_action(chat_id=query.message.chat_id, action=ChatAction.TYPING)
    keyboard = [
        [InlineKeyboardButton("ЁЯТ╕ Bkash", callback_data='bkash')],
        [InlineKeyboardButton("ЁЯТ│ Nagad", callback_data='nagad')],
        [InlineKeyboardButton("ЁЯЪА Rocket", callback_data='rocket')],
        [InlineKeyboardButton("ЁЯФЩ Back", callback_data='back_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text="ржкрзЗржорзЗржирзНржЯ ржХрж░рждрзЗ рждрзИрж░рж┐? ржирзАржЪрзЗ ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ ржкрзЗржорзЗржирзНржЯ ржорзЗржержб ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи ЁЯТ░", reply_markup=reply_markup)
    update_daily_users(query.from_user.id)

def verify_transaction(update: Update, context: CallbackContext, back_to_payment=False):
    keyboard = [[InlineKeyboardButton("ЁЯФЩ Back", callback_data='back_to_payment')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text(text="рж╕рзНржмрж╛ржЧрждржо! рж▓рзЗржиржжрзЗржи ржпрж╛ржЪрж╛ржЗ ржХрж░рждрзЗ, ржжрзЯрж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ рж▓рзЗржиржжрзЗржирзЗрж░ ржЯрзНрж░рж╛ржЮрзНржЬрзЗржХрж╢ржи ржЖржЗржбрж┐ ржПржЦрж╛ржирзЗ ржЕржмрж╢рзНржпржЗ рж▓рж┐ржЦрзБржиред ржПржЗржнрж╛ржмрзЗ тЬЕ ржкрзНрж░рждрж┐ржХрзНрж╖ржг ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо рж╕рзБржмрж┐ржзрж╛ ржкрзЗрждрзЗ рж╕ржорзНржнржм рж╣ржмрзЗ!", reply_markup=reply_markup)

def check_transaction(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    transaction_id = update.message.text
    first_name = update.effective_user.first_name

    if chat_id in user_memberships and user_memberships[chat_id] >= 2:
        context.bot.send_message(chat_id=chat_id, text="тЭМ ржЖржкржирж┐ рж╕рж░рзНржмрж╛ржзрж┐ржХ ржорзЗржорзНржмрж╛рж░рж╢рж┐ржк рж╕рзАржорж╛ (2 ржмрж╛рж░) ржкрзМржБржЫрзЗ ржЧрзЗржЫрзЗржиред")
        return

    response = requests.get(BASE_URL + 'check_transaction_updated.php', params={'transaction_id': transaction_id})
    if response.text == 'used':
        context.bot.send_message(chat_id=chat_id, text="тЭМ ржПржЗ рж▓рзЗржиржжрзЗржи ржЖржЗржбрж┐ ржЖржЧрзЗржЗ ржмрзНржпржмрж╣рзГржд рж╣рзЯрзЗржЫрзЗред ржЖржкржирж┐ ржПржХржЯрж┐ ржирждрзБржи рж▓рзЗржиржжрзЗржи ржЖржЗржбрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржЪрж╛ржЗрж▓рзЗ, ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржирждрзБржи рж▓рзЗржиржжрзЗржи ржЖржЗржбрж┐ рж╕рж╛ржмржорж┐ржЯ ржХрж░рзБржиред")
        return

    response = requests.get('https://api.hornyhouse.xyz/t.txt')
    api_text = response.text

    if transaction_id in api_text:
        payload = {'chat_id': chat_id, 'transaction_id': transaction_id}
        requests.post(BASE_URL + 'save_transaction_updated.php', data=payload)

        message = f"ЁЯе│ ржЕржнрж┐ржиржирзНржжржи, {first_name}! ржЖржкржирж╛рж░ ржкрзЗржорзЗржирзНржЯ рж╕рж╛ржлрж▓рзНржпрзЗрж░ рж╕рж╛ржерзЗ рж╕ржорзНржкржирзНржи рж╣рзЯрзЗржЫрзЗ! ЁЯОЙ\n\n"
        message += "ЁЯФС ржПржЦрж╛ржирзЗ ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо рж▓рж┐ржВржХржЧрзБрж▓рж┐ ржкрзЗрждрзЗ ржПржЗ рж▓рж┐ржВржХржЧрзБрж▓рж┐ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи:\n\n"
        message += "1. рж▓рж┐ржВржХ 1: [рж▓рж┐ржВржХ 1](https://t.me/+jwVA1088ntI4NTY1)\n"
        message += "2. рж▓рж┐ржВржХ 2: [рж▓рж┐ржВржХ 2](https://t.me/+HtfDVNyNaPcxNWVl)\n"
        message += "\nржЖржорж╛ржжрзЗрж░ рж╕рзЗржмрж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж┐ ржзржирзНржпржмрж╛ржж! ЁЯТЦ"

        if chat_id in user_memberships:
            user_memberships[chat_id] += 1
        else:
            user_memberships[chat_id] = 1

        context.bot.send_message(chat_id=chat_id, text=message, parse_mode="Markdown")
    else:
        context.bot.send_message(chat_id=chat_id, text="тЭМ ржЖржкржирж╛рж░ рж▓рзЗржиржжрзЗржи ржЖржЗржбрж┐ ржЖржорж╛ржжрзЗрж░ рж╕рж╛рж░рзНржнрж╛рж░рзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи, ржжржпрж╝рж╛ ржХрж░рзЗ!")
    update_daily_users(update.effective_user.id)

def button(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data == 'buy_membership':
        payment_menu(update, context, query)
    elif query.data in ['bkash', 'nagad', 'rocket']:
        context.bot.send_chat_action(chat_id=query.message.chat_id, action=ChatAction.TYPING)
        payment_method = query.data.capitalize()
        response = f" {payment_method} ржкрж╛рж░рж╕рзЛржирж╛рж▓ ржирж╛ржорзНржмрж╛рж░: 01779335569\n\nржЯрж╛ржХрж╛ ржкрж╛ржарж┐рзЯрзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржнрзЗрж░рж┐ржлрж╛ржЗ ржХрж░рзБржиЁЯСЗ\n\nржЯрж╛ржХрж╛рж░ ржкрж░рж┐ржорж╛ржи :рззрзлрзжрз│"
        keyboard = [[InlineKeyboardButton("тЬЕ Verify Your Transaction", callback_data='verify')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(text=response, reply_markup=reply_markup)

    if query.data == 'benefits':
        context.bot.send_chat_action(chat_id=query.message.chat_id, action=ChatAction.TYPING)
        keyboard = [[InlineKeyboardButton("ЁЯФЩ Back", callback_data='back_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = "ЁЯМЯ ржЖржорж╛ржжрзЗрж░ ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо ржорзЗржорзНржмрж╛рж░рж╢рж┐ржк ржирж┐рж▓рзЗ ржкрж╛ржмрзЗржи ржирж┐ржорзНржирж▓рж┐ржЦрж┐ржд рж╕рзБржмрж┐ржзрж╛рж╕ржорзВрж╣ ЁЯСЗ\n\n"
        message += "тЬЕ рзирзж+ ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо ржжрзЗрж╢рж┐ ржХрж╛рж▓рзЗржХрж╢ржи: рж╕рж░рзНржмрзЛржЪрзНржЪ ржорж╛ржирзЗрж░ ржирждрзБржи ржХржирзНржЯрзЗржирзНржЯ ржирж┐ржи ржкрзНрж░рждрж┐ржжрж┐ржи!\n\n"
        message += "тЬи рж░рзЗржЧрзБрж▓рж╛рж░ ржЖржкржбрзЗржЯ ржХржиржЯрзЗржирзНржЯ: рж╕ржмрж╕ржорзЯ ржирждрзБржи ржорзЗржорзНржмрж╛рж░ржжрзЗрж░ ржЬржирзНржп ржирждрзБржи ржЖржкржбрзЗржЯ!\n\n"
        message += "ЁЯТ╕ рж▓рж╛ржЗржлржЯрж╛ржЗржо ржорзЗржорзНржмрж╛рж░рж╢рж┐ржк: ржПржХржмрж╛рж░ ржХрж┐ржирж▓рзЗ рж╕рж╛рж░рж╛ржЬрзАржмржи ржПржЗ рж╕рзБржмрж┐ржзрж╛ржЧрзБрж▓рж┐ ржкрзЗрждрзЗ ржерж╛ржХржмрзЗржи!\n\n"
        message += "рждрж╛рж╣рж▓рзЗ рждрзИрж░рж┐ рж╣рзЯрзЗ ржпрж╛ржи, ржПржХржЯрж┐ ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо ржорзЗржорзНржмрж╛рж░ рж╣рзЛржи ржПржмржВ ржЖржорж╛ржжрзЗрж░ ржЖрж░ржУ ржмрзЗрж╢рж┐ ржЕрж╕рж╛ржзрж╛рж░ржг ржХржирзНржЯрзЗржирзНржЯ ржЕржержмрж╛ ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо рж╕рзБржмрж┐ржзрж╛ржЧрзБрж▓рж┐ ржЙржкржнрзЛржЧ ржХрж░рзБржи! ЁЯШК"
        
        query.edit_message_text(text=message, reply_markup=reply_markup)

    elif query.data == 'back_main':
        main_menu(update, context, message_id=query.message.message_id)
    elif query.data == 'back_to_payment':
        payment_menu(update, context, query)
    elif query.data == 'verify':
        verify_transaction(update, context)
    update_daily_users(query.from_user.id)

def main():
    token = '6701652400:AAGj9Pm6dkfhGVQ42CJR-FqAUlFDzyyiAM4'  # Replace with your actual bot token
    updater = Updater(token, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CommandHandler('stat', stats))
    dp.add_handler(CallbackQueryHandler(button))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, check_transaction))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
